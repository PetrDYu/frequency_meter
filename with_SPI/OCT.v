// megafunction wizard: %ALTOCT%
// GENERATION: STANDARD
// VERSION: WM1.0
// MODULE: ALT_OCT_POWER 

// ============================================================
// File Name: OCT.v
// Megafunction Name(s):
// 			ALT_OCT_POWER
//
// Simulation Library Files(s):
// 			altera_mf
// ============================================================
// ************************************************************
// THIS IS A WIZARD-GENERATED FILE. DO NOT EDIT THIS FILE!
//
// 16.0.0 Build 211 04/27/2016 SJ Standard Edition
// ************************************************************


//Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
//Your use of Altera Corporation's design tools, logic functions 
//and other software and tools, and its AMPP partner logic 
//functions, and any output files from any of the foregoing 
//(including device programming or simulation files), and any 
//associated documentation or information are expressly subject 
//to the terms and conditions of the Altera Program License 
//Subscription Agreement, the Altera Quartus Prime License Agreement,
//the Altera MegaCore Function License Agreement, or other 
//applicable license agreement, including, without limitation, 
//that your use is for the sole purpose of programming logic 
//devices manufactured by Altera and sold by Altera or its 
//authorized distributors.  Please refer to the applicable 
//agreement for further details.


//alt_oct_power CBX_AUTO_BLACKBOX="ALL" device_family="Cyclone V" WIDTH_PTC=16 WIDTH_STC=16 parallelterminationcontrol rzqin seriesterminationcontrol
//VERSION_BEGIN 16.0 cbx_alt_oct_power 2016:04:27:18:05:34:SJ cbx_cycloneii 2016:04:27:18:05:34:SJ cbx_lpm_add_sub 2016:04:27:18:05:34:SJ cbx_lpm_compare 2016:04:27:18:05:34:SJ cbx_lpm_counter 2016:04:27:18:05:34:SJ cbx_lpm_decode 2016:04:27:18:05:34:SJ cbx_mgl 2016:04:27:18:06:48:SJ cbx_nadder 2016:04:27:18:05:34:SJ cbx_stratix 2016:04:27:18:05:34:SJ cbx_stratixii 2016:04:27:18:05:34:SJ cbx_stratixiii 2016:04:27:18:05:34:SJ  VERSION_END
// synthesis VERILOG_INPUT_VERSION VERILOG_2001
// altera message_off 10463


//synthesis_resources = cyclonev_termination 1 cyclonev_termination_logic 1 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  OCT_alt_oct_power_k4e
	( 
	parallelterminationcontrol,
	rzqin,
	seriesterminationcontrol) ;
	output   [15:0]  parallelterminationcontrol;
	input   [0:0]  rzqin;
	output   [15:0]  seriesterminationcontrol;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   [0:0]  rzqin;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [0:0]   wire_sd1a_serdataout;
	wire  [15:0]   wire_sd2a_parallelterminationcontrol;
	wire  [15:0]   wire_sd2a_seriesterminationcontrol;

	cyclonev_termination   sd1a_0
	( 
	.clkusrdftout(),
	.compoutrdn(),
	.compoutrup(),
	.enserout(),
	.rzqin(rzqin),
	.scanout(),
	.serdataout(wire_sd1a_serdataout[0:0]),
	.serdatatocore()
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clkenusr(1'b0),
	.clkusr(1'b0),
	.enserusr(1'b0),
	.nclrusr(1'b0),
	.otherenser({10{1'b0}}),
	.scanclk(1'b0),
	.scanen(1'b0),
	.scanin(1'b0),
	.serdatafromcore(1'b0),
	.serdatain(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	);
	cyclonev_termination_logic   sd2a_0
	( 
	.parallelterminationcontrol(wire_sd2a_parallelterminationcontrol[15:0]),
	.serdata(wire_sd1a_serdataout),
	.seriesterminationcontrol(wire_sd2a_seriesterminationcontrol[15:0])
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.enser(1'b0),
	.s2pload(1'b0),
	.scanclk(1'b0),
	.scanenable(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off

	// synopsys translate_on
	);
	assign
		parallelterminationcontrol = wire_sd2a_parallelterminationcontrol,
		seriesterminationcontrol = wire_sd2a_seriesterminationcontrol;
endmodule //OCT_alt_oct_power_k4e
//VALID FILE


// synopsys translate_off
`timescale 1 ps / 1 ps
// synopsys translate_on
module OCT (
	rzqin,
	parallelterminationcontrol,
	seriesterminationcontrol);

	input	[0:0]  rzqin;
	output	[15:0]  parallelterminationcontrol;
	output	[15:0]  seriesterminationcontrol;

	wire [15:0] sub_wire0;
	wire [15:0] sub_wire1;
	wire [15:0] parallelterminationcontrol = sub_wire0[15:0];
	wire [15:0] seriesterminationcontrol = sub_wire1[15:0];

	OCT_alt_oct_power_k4e	OCT_alt_oct_power_k4e_component (
				.rzqin (rzqin),
				.parallelterminationcontrol (sub_wire0),
				.seriesterminationcontrol (sub_wire1));

endmodule

// ============================================================
// CNX file retrieval info
// ============================================================
// Retrieval info: PRIVATE: INTENDED_DEVICE_FAMILY STRING "Cyclone V"
// Retrieval info: PRIVATE: SYNTH_WRAPPER_GEN_POSTFIX STRING "0"
// Retrieval info: CONSTANT: INTENDED_DEVICE_FAMILY STRING "Cyclone V"
// Retrieval info: CONSTANT: LPM_TYPE STRING "ALT_OCT_POWER"
// Retrieval info: CONSTANT: width_ptc NUMERIC "16"
// Retrieval info: CONSTANT: width_stc NUMERIC "16"
// Retrieval info: USED_PORT: parallelterminationcontrol 0 0 16 0 OUTPUT NODEFVAL "parallelterminationcontrol[15..0]"
// Retrieval info: USED_PORT: rzqin 0 0 1 0 INPUT NODEFVAL "rzqin[0..0]"
// Retrieval info: USED_PORT: seriesterminationcontrol 0 0 16 0 OUTPUT NODEFVAL "seriesterminationcontrol[15..0]"
// Retrieval info: CONNECT: @rzqin 0 0 1 0 rzqin 0 0 1 0
// Retrieval info: CONNECT: parallelterminationcontrol 0 0 16 0 @parallelterminationcontrol 0 0 16 0
// Retrieval info: CONNECT: seriesterminationcontrol 0 0 16 0 @seriesterminationcontrol 0 0 16 0
// Retrieval info: GEN_FILE: TYPE_NORMAL OCT.v TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL OCT.inc FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL OCT.cmp FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL OCT.bsf FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL OCT_inst.v FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL OCT_bb.v TRUE
// Retrieval info: LIB_FILE: altera_mf
